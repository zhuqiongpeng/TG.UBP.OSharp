OSharp框架本身未实现对Oracle的支持，所以需要自己来实现，在这里使用Devart组件来实现。
V1.5：
大概的思路：
	1、为Oracle建立OracleDbContextInitializer（OSharp.Data.Entity.Oracle），然后赋值给osharp.config配置文件的initializer，这样系统在初始化时就会调用OracleDbContextInitializer；
	2、不同的数据库增加不同的映射（由于Devart支持忽略单引号，所以不需要为大小写指定映射，但由于Oracle不支持自增长的GUID类型，所以当ID是这个类型时需要手动指定映射），然后根据配置文件的DbType来动态加载当前数据库的映射信息。
具体如下：

1、在OSharp.Data.Entity.Oracle项目中增加Oracle的支持；
2、在osharp.config配置文件中的<context><initializer>，指定OracleDbContextInitializer；
3、设置OracleEntityProviderConfig.Workarounds.IgnoreSchemaName = true;
	   OracleEntityProviderConfig.Workarounds.DisableQuoting = true;
4、在Web.config中增加DbType配置项，用于表示当前数据库的类型；
5、IEntityMapper：增加一个属性OwnDbType，表示该映射信息属于哪种数据库；
6、在DbContextInitializerBase<TDbContext>.EntityMappersFilter方法中，增加“OwnDbType=配置文件DbType配置项”过滤条件，这样系统就会只加载当前数据库类型的配置信息；
7、定义OracleConfiguration：
	1）数据库自增长的GUID属性(Id)——DatabaseGeneratedOption.None；
	2）DateTime类型，系统默认会映射成Oracle的TIMESTAMP类型：设置OracleEntityProviderConfig.Workarounds.IgnoreSchemaName = true;
	3)没有限制长度的String类型，系统默认会映射成Oracle的Lob类型：设置OracleEntityProviderConfig.Workarounds.UseNonLobStrings = true;


V2.0:
在V1.5的基础上，做如下的修改：将根据OwnDbType来加载指定映射信息改成根据配置文件加载指定映射信息
1、直接在osharp.config配置文件中的<context><initializer><mapperFiles>，指定需要加载的映射文件（不同的数据库需要创建不同的项目）；
2、取消Web.config中DbType配置项；
3、取消增加IEntityMapper.OwnDbType；
4、取消EntityConfigurationBase.OwnDbType；
5、取消EntityConfigurationBase_Oracle；
6、取消在DbContextInitializerBase<TDbContext>.EntityMappersFilter方法中增加的“OwnDbType=配置文件DbType配置项”过滤条件；
7、为Oracle单独创建映射项目，并在配置文件中注册；

